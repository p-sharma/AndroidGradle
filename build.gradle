// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    apply from: "$rootDir/helper/common-methods.gradle"

    repositories {
        jcenter()
        mavenCentral()
        mavenLocal()
        maven {
            credentials.username getPropertyValue('NEXUS_USERNAME')
            credentials.password getPropertyValue('NEXUS_PASSWORD')
            url "http://nexus.mtvi.com/nexus/content/repositories/snapshots"
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.2.2'
        classpath 'com.vmn.gradle:Pipeline:0.5.0-SNAPSHOT'
    }
}

ext {
    //Get user name password for your nexus repository.
    //These values are available to all sub projects.

    NEXUS_USERNAME = getPropertyValue('NEXUS_USERNAME')
    NEXUS_PASSWORD = getPropertyValue('NEXUS_PASSWORD')
}

allprojects {
    //Buildscript repositories for all sub-projects are defined here
    buildscript {
        repositories {
            mavenCentral()
            mavenLocal()
            jcenter()
        }
    }

    //Repositories of all sub-projects are defined here
    repositories {
        jcenter()
        mavenCentral()
        mavenLocal()
    }
}

subprojects {
    // Build a checkstyle configuration for each child project.
    plugins.withType(CheckstylePlugin) {
        checkstyle {
            toolVersion = "6.1.1"
        }

        task checkstyleMain(overwrite: true, type: Checkstyle) {
            configFile rootProject.file('config/checkstyle/checkstyle.xml')
            source 'src/main/java'
            include '**/*.java'

            reports {
                xml {
                    destination "build/reports/checkstyleMain.xml"
                }
            }
            classpath = files()
        }

        task checkstyleTest(overwrite: true, type: Checkstyle) {
            configFile rootProject.file('config/checkstyle/checkstyle.xml')
            source 'src/main/test'
            include '**/*.java'

            reports {
                xml {
                    destination "build/reports/checkstyleTest.xml"
                }
            }
            classpath = files()
        }

        task checkstyleMainHtml << {
            def outfile = new File(checkstyleMain.reports.xml.destination.parent, 'checkstyleMain.html')
            if (outfile.exists()) {
                ant.xslt(in: checkstyleMain.reports.xml.destination,
                        style: rootProject.file('config/checkstyle/checkstyle-noframes-sorted.xsl'),
                        out: outfile)
                println 'Checkstyle report available in HTML at file://' + outfile
            }
        }

        task checkstyleTestHtml << {
            def outfile = new File(checkstyleTest.reports.xml.destination.parent, 'checkstyleTest.html')
            if (outfile.exists()) {
                ant.xslt(in: checkstyleTest.reports.xml.destination,
                        style: rootProject.file('config/checkstyle/checkstyle-noframes-sorted.xsl'),
                        out: outfile)
                println 'Checkstyle report available in HTML at file://' + outfile
            }
        }

        checkstyleMain.finalizedBy checkstyleMainHtml
        checkstyleTest.finalizedBy checkstyleTestHtml

    }

    plugins.withType(JacocoPlugin) {
        jacoco {
            toolVersion = "0.7.1.201405082137"
        }

        def coverageSourceDirs = [
            "${projectDir}/src/main/java"
        ]

        //Additional class patterns to exclude from coverage
        def additionalClasses = [
        ]

        //Excluded classes from coverage
        def excludes = [
              '**/R.class',
              '**/R$*.class',
              '**/*$ViewInjector*.*',
              '**/BuildConfig.*',
              '**/Manifest*.*',
        ]
        excludes.addAll(additionalClasses);

        task jacocoGenerateCSV {
            group = "Reporting"
            doFirst {
                String excludedStr = excluded.toString()
                String excludedStrNoBrackets = excludedStr.substring(1, excludedStr.length() - 1)
                def file = new File("${buildDir}/excludes.csv")
                file.getParentFile().mkdirs();
                file.delete()
                file.createNewFile()
                file << excludedStrNoBrackets
            }
        }

        task jacocoReport(type:JacocoReport, dependsOn: 'testDebugUnitTest') {
            group = "Reporting"
            description = "Generate Jacoco coverage reports for ${project.path}"

            classDirectories = fileTree(
              dir: "$buildDir/intermediates/classes/debug",
              excludes: excludes
            )
            sourceDirectories = files(coverageSourceDirs)
            executionData = files("$buildDir/jacoco/testDebugUnitTest.exec")

            reports {
                xml.enabled = false
                html.enabled = true
            }
        }
    }

    afterEvaluate {
        // Custom configuration specific to Android projects
        if (project.hasProperty('android')) {
            android {
                compileSdkVersion 23
                buildToolsVersion "23.0.2"

                buildTypes.release {
                    lintOptions.abortOnError false
                }

                buildTypes.debug {
                    lintOptions.abortOnError true
                    testCoverageEnabled true
                }
            }
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
